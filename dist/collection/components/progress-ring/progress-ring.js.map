{"version":3,"file":"progress-ring.js","sourceRoot":"","sources":["../src/components/progress-ring/progress-ring.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @stencil/decorators-style */\nimport { Component, Prop, Watch, h, Event, EventEmitter } from \"@stencil/core\";\nimport easingAnimationFrames, {\n  EasingType,\n  RestartFramesFunction,\n  EasingAnimationFramesOptions,\n  TemplateOptions,\n  ResumeFramesFunction,\n  RestartFramesOptions,\n} from \"easing-animation-frames\";\n\nexport interface EventPayload {\n  id: string;\n}\n\nexport interface ProgressEventPayload {\n  id: string;\n  progress: number;\n  percentage: number;\n}\n\nexport interface ColorChangeEventPayload {\n  id: string;\n  color: string;\n}\n\n@Component({\n  tag: \"progress-ring\",\n  styleUrl: \"progress-ring.css\",\n  shadow: true,\n})\nexport class ProgressRing {\n  // SHAPE\n\n  /**\n   * Radius of the ring\n   */\n  @Prop() radius = 80;\n  /**\n   * Thickness of the ring\n   */\n  @Prop() strokeWidth = 10;\n  private normalizedRadius: number;\n  private circumference: number;\n\n  @Watch(\"radius\")\n  radiusUpdated(newValue: number) {\n    this.setShapeSettings({\n      radius: newValue,\n    });\n    this.restartProgress();\n  }\n\n  @Watch(\"strokeWidth\")\n  strokeWidthUpdated(newValue: number) {\n    this.setShapeSettings({\n      strokeWidth: newValue,\n    });\n    this.restartProgress();\n  }\n\n  private setShapeSettings = ({\n    radius = this.radius,\n    strokeWidth = this.strokeWidth,\n  }) => {\n    // Caches calculation results\n    this.normalizedRadius = radius - Math.floor(strokeWidth / 2);\n    this.circumference = this.normalizedRadius * 2 * Math.PI;\n  };\n\n  // TEXT\n\n  /**\n   * Font size of the integer\n   */\n  @Prop() intSize = 30;\n  /**\n   * Font size of the decimal places\n   */\n  @Prop() decimalSize: number;\n  /**\n   * Hide digits\n   */\n  @Prop() disableDigits = false;\n  /**\n   * Hide decimal places\n   */\n  @Prop() disableDecimals = false;\n\n  private parsePercentageText = (percentage: number) => {\n    if (percentage <= 0) {\n      return [\"0\", \"0\"];\n    }\n    return percentage.toFixed(1).split(\".\");\n  };\n\n  private isZeroPercent = () => {\n    return this.percentage === 0;\n  };\n\n  private getDecimalSize = () => {\n    return this.decimalSize === undefined\n      ? Math.floor(this.intSize * 0.7)\n      : this.decimalSize;\n  };\n\n  // STYLE\n\n  /**\n   * Addes rounded linecap to the ring\n   */\n  @Prop() roundLinecap = false;\n\n  private getLinecap = () => {\n    return this.roundLinecap ? \"round\" : \"butt\";\n  };\n\n  // COLORS\n\n  /**\n   * Color steps of the ring\n   */\n  @Prop() colors: string | Map<number, string> = new Map([\n    [0, \"#ff4f40\"], // red\n    [25, \"#ffcd40\"], // yellow\n    [50, \"#66a0ff\"], // blue\n    [75, \"#30bf7a\"], // green\n  ]);\n\n  /**\n   * Inverts the color scheme\n   */\n  @Prop() invertColors = false;\n\n  private internalColors: Map<number, string>;\n\n  @Watch(\"colors\")\n  colorsUpdated(newValue: string | Map<number, string>) {\n    this.setColorsSettings({\n      colors: newValue,\n    });\n    this.restartProgress();\n  }\n\n  @Watch(\"invertColors\")\n  invertColorsUpdated(newValue: boolean) {\n    this.setColorsSettings({\n      invertColors: newValue,\n    });\n    this.restartProgress();\n  }\n\n  private setColorsSettings = ({\n    colors = this.colors,\n    invertColors = this.invertColors,\n  }) => {\n    const colorsMap: Map<number, string> =\n      colors instanceof Map ? colors : new Map(JSON.parse(colors));\n    if (!invertColors) {\n      this.internalColors = colorsMap;\n      return;\n    }\n\n    // If inverseColors prop is set to true\n    const colorsArray = [...colorsMap];\n    const colorsArrayReversed = [...colorsArray].reverse();\n    this.internalColors = new Map(\n      colorsArray.map((color, i) => [color[0], colorsArrayReversed[i][1]])\n    );\n  };\n\n  private setColors = (percentage: number) => {\n    let color: string;\n    const colorsArray = [...this.internalColors];\n\n    for (let i = 0; i < colorsArray.length; i++) {\n      if (i === colorsArray.length - 1) {\n        color = colorsArray[i][1];\n        break;\n      }\n      if (percentage < colorsArray[i + 1][0]) {\n        color = colorsArray[i][1];\n        break;\n      }\n    }\n\n    // Emits color change event\n    if (this.eventId !== undefined) {\n      this.prcColor.emit({\n        id: this.eventId,\n        color,\n      });\n    }\n\n    this.ring.style.stroke = color;\n    this.ringBackground.style.stroke = color;\n    this.percentageText.style.fill = color;\n  };\n\n  // ANIMATION\n\n  /**\n   * Percentage value (mandatory)\n   */\n  @Prop({ reflect: true, mutable: true }) percentage = 0;\n\n  /**\n   * Animation duration in miliseconds\n   */\n  @Prop() duration = 4000;\n\n  /**\n   * Easing animation function name\n   */\n  @Prop() easingType: EasingType = \"quartInOut\";\n  private internalPercentage: number;\n  private start = 0;\n  private progress = 0;\n  private resumeFrames: ResumeFramesFunction;\n  private restartFrames: RestartFramesFunction;\n  private isLoaded = false;\n  private isDisconnected = false;\n  private complete = false;\n\n  @Watch(\"percentage\")\n  percentageUpdated() {\n    if (this.percentage < 0) {\n      this.percentage = 0;\n      return;\n    }\n    this.restartProgress();\n  }\n\n  @Watch(\"duration\")\n  durationtUpdated() {\n    this.restartProgress();\n  }\n\n  @Watch(\"easingType\")\n  easingTypeUpdated() {\n    this.restartProgress();\n  }\n\n  // Called for every requestAnimationFrame\n  private setProgress = ({\n    progress,\n    stopFrames,\n    resumeFrames,\n    restartFrames,\n  }: TemplateOptions) => {\n    // Stops the animation if the component is disconnected from the DOM\n    if (this.isDisconnected && typeof stopFrames === \"function\") {\n      stopFrames();\n\n      // Emits stop event\n      if (this.eventId !== undefined) {\n        this.prcStop.emit({ id: this.eventId });\n      }\n      return;\n    }\n\n    this.progress = progress;\n    this.resumeFrames = resumeFrames;\n    this.restartFrames = restartFrames;\n\n    // Shape\n    const currentPercentage =\n      (this.internalPercentage - this.start) * progress + this.start;\n    const offset =\n      currentPercentage >= 100\n        ? 0\n        : this.circumference - (currentPercentage / 100) * this.circumference;\n    this.ring.style.strokeDashoffset = String(offset); // strokeDashoffset value type is string\n\n    // Text\n    const parsedPercentageText = this.parsePercentageText(currentPercentage);\n    this.intText.innerHTML = parsedPercentageText[0];\n    this.decimalText.innerHTML = parsedPercentageText[1];\n\n    // Emits progress change event\n    if (this.eventId !== undefined) {\n      this.prcProgress.emit({\n        id: this.eventId,\n        progress,\n        percentage: currentPercentage,\n      });\n    }\n  };\n\n  // Called every time the percentage attribute gets updated\n  private restartProgress = () => {\n    if (typeof this.restartFrames !== \"function\") {\n      return;\n    }\n\n    // Emits restart event\n    if (this.eventId !== undefined) {\n      this.prcRestart.emit({ id: this.eventId });\n    }\n\n    // Resets the progresss to 0 and set the start to be the previous percentage\n    const currentPercentage =\n      (this.internalPercentage - this.start) * this.progress + this.start;\n    this.internalPercentage = this.percentage;\n    this.progress = 0;\n    this.start = currentPercentage;\n\n    // Reset the complete state\n    this.complete = false;\n\n    // Restarts the template function\n    const restartSettings: RestartFramesOptions = {\n      restartDuration: this.duration,\n      restartEasingType: this.easingType,\n      restartTemplate: this.setProgress,\n      restartComplete: this.completeCallback,\n    };\n\n    this.setColors(this.percentage);\n    this.restartFrames(restartSettings);\n  };\n\n  private completeCallback = () => {\n    if (!this.complete) {\n      this.complete = true;\n\n      // Emits complete event\n      if (this.eventId !== undefined) {\n        this.prcComplete.emit({ id: this.eventId });\n      }\n    }\n  };\n\n  // EVENTS\n\n  /**\n   * Unique ID for the event listeners\n   */\n  @Prop() eventId?: string;\n  /**\n   * Animation progress value to be emitted (from 0 to 1)\n   */\n  @Event({ bubbles: true, composed: true })\n  prcProgress: EventEmitter<ProgressEventPayload>;\n  /**\n   * Color value to be emitted\n   */\n  @Event({ bubbles: true, composed: true })\n  prcColor: EventEmitter<ColorChangeEventPayload>;\n  /**\n   * OnStart event of the animation\n   */\n  @Event({ bubbles: true, composed: true })\n  prcStart: EventEmitter<EventPayload>;\n  /**\n   * OnComplete event of the animation\n   */\n  @Event({ bubbles: true, composed: true })\n  prcComplete: EventEmitter<EventPayload>;\n  /**\n   * OnStop event of the animation\n   */\n  @Event({ bubbles: true, composed: true }) prcStop: EventEmitter<EventPayload>;\n  /**\n   * OnResume event of the animation\n   */\n  @Event({ bubbles: true, composed: true })\n  prcResume: EventEmitter<EventPayload>;\n  /**\n   * OnRestart event of the animation\n   */\n  @Event({ bubbles: true, composed: true })\n  prcRestart: EventEmitter<EventPayload>;\n\n  /**\n   * Lifecycle Methods\n   */\n  componentWillLoad() {\n    if (this.percentage < 0) {\n      this.percentage = 0;\n      return;\n    }\n\n    // We need internal percentage, which is not reactive to prop changes\n    this.internalPercentage = this.percentage;\n\n    this.setShapeSettings({\n      radius: this.radius,\n      strokeWidth: this.strokeWidth,\n    });\n\n    this.setColorsSettings({\n      invertColors: this.invertColors,\n      colors: this.colors,\n    });\n  }\n\n  componentDidLoad() {\n    this.isLoaded = true;\n    this.setColors(this.percentage);\n\n    // Emits restart event\n    if (this.eventId !== undefined) {\n      this.prcStart.emit({ id: this.eventId });\n    }\n\n    const animationSettings: EasingAnimationFramesOptions = {\n      duration: this.duration,\n      easingType: this.easingType,\n      template: this.setProgress,\n      complete: this.completeCallback,\n    };\n\n    easingAnimationFrames(animationSettings);\n  }\n\n  connectedCallback() {\n    if (this.isLoaded) {\n      // If the component is already loaded, that means it was loaded but\n      // disconnected from the DOM and then connected to the DOM again\n      this.isDisconnected = false;\n\n      // Emits complete event\n      if (this.eventId !== undefined) {\n        this.prcResume.emit({ id: this.eventId });\n      }\n\n      // Resumes animation that is still in progress\n      this.resumeFrames();\n    }\n  }\n\n  disconnectedCallback() {\n    this.isDisconnected = true;\n  }\n\n  /**\n   * JSX\n   */\n  private ringBackground: SVGCircleElement;\n  private ring: SVGCircleElement;\n  private percentageText: SVGTextElement;\n  private intText: SVGTSpanElement;\n  private decimalText: SVGTSpanElement;\n\n  render() {\n    return (\n      <div class=\"root\">\n        <svg height={this.radius * 2} width={this.radius * 2}>\n          <circle\n            cx={this.radius}\n            cy={this.radius}\n            r={this.normalizedRadius}\n            stroke-width={this.strokeWidth}\n            fill=\"transparent\"\n            opacity=\"0.1\"\n            ref={(el: SVGCircleElement) => (this.ringBackground = el)}\n            class=\"background-ring\"\n          />\n          <circle\n            cx={this.radius}\n            cy={this.radius}\n            r={this.normalizedRadius}\n            stroke-width={this.strokeWidth}\n            stroke-dasharray={`${this.circumference} ${this.circumference}`}\n            fill=\"transparent\"\n            stroke-linecap={this.getLinecap()}\n            ref={(el: SVGCircleElement) => (this.ring = el)}\n            class=\"ring\"\n          />\n          <text\n            x=\"50%\"\n            y=\"50%\"\n            text-anchor=\"middle\"\n            dy=\"0.5ex\"\n            font-size={this.intSize}\n            ref={(el: SVGTextElement) => (this.percentageText = el)}\n            class={this.disableDigits ? \"hide\" : null}\n          >\n            <tspan\n              font-size={this.intSize}\n              ref={(el: SVGTSpanElement) => (this.intText = el)}\n              class=\"intText\"\n            ></tspan>\n            <tspan\n              font-size={this.intSize}\n              class={\n                this.isZeroPercent() || this.disableDecimals\n                  ? \"hide\"\n                  : \"decimalPointText\"\n              }\n            >\n              .\n            </tspan>\n            <tspan\n              font-size={this.getDecimalSize()}\n              ref={(el: SVGTSpanElement) => (this.decimalText = el)}\n              class={\n                this.isZeroPercent() || this.disableDecimals\n                  ? \"hide\"\n                  : \"decimalText\"\n              }\n            ></tspan>\n            <tspan\n              font-size={this.getDecimalSize()}\n              dx=\"0.5ex\"\n              class=\"percentageText\"\n            >\n              %\n            </tspan>\n          </text>\n        </svg>\n        <slot />\n      </div>\n    );\n  }\n}\n"]}