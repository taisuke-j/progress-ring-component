{"version":3,"names":["backInOut","t","s","backIn","backOut","bounceOut","a","b","c","ca","cb","cc","t2","bounceInOut","bounceIn","circInOut","Math","sqrt","circIn","circOut","cubicInOut","pow","cubicIn","cubicOut","f","elasticInOut","sin","PI","elasticIn","elasticOut","expoInOut","expoIn","expoOut","linear","quadInOut","quadIn","quadOut","quarticInOut","quarticIn","quarticOut","qinticInOut","qinticIn","qinticOut","sineInOut","cos","sineIn","v","abs","sineOut","raf","window","requestAnimationFrame","callback","setTimeout","caf","cancelAnimationFrame","id","clearTimeout","defaultOptions","duration","easingType","easingAnimationFrames","template","complete","easingFunc","eases","framesDuration","templateFunc","completeFunc","requestId","currentTime","startTime","passedTime","progress","framesComplete","framesCancelled","framesResumed","framesRestarted","stopFrames","resumeFrames","restartFrames","frame","timestamp","Date","getTime","restartEasingType","restartDuration","restartTemplate","restartComplete","e","console","error","progressRingCss","ProgressRingStyle0","ProgressRing","this","setShapeSettings","radius","strokeWidth","normalizedRadius","floor","circumference","parsePercentageText","percentage","toFixed","split","isZeroPercent","getDecimalSize","decimalSize","undefined","intSize","getLinecap","roundLinecap","setColorsSettings","colors","invertColors","colorsMap","Map","JSON","parse","internalColors","colorsArray","colorsArrayReversed","reverse","map","color","i","setColors","length","eventId","prcColor","emit","ring","style","stroke","ringBackground","percentageText","fill","start","isLoaded","isDisconnected","setProgress","prcStop","currentPercentage","internalPercentage","offset","strokeDashoffset","String","parsedPercentageText","intText","innerHTML","decimalText","prcProgress","restartProgress","prcRestart","restartSettings","completeCallback","prcComplete","radiusUpdated","newValue","strokeWidthUpdated","colorsUpdated","invertColorsUpdated","percentageUpdated","durationtUpdated","easingTypeUpdated","componentWillLoad","componentDidLoad","prcStart","animationSettings","connectedCallback","prcResume","disconnectedCallback","render","h","key","class","height","width","cx","cy","r","opacity","ref","el","x","y","dy","disableDigits","disableDecimals","dx"],"sources":["node_modules/eases-jsnext/dist/eases.es.js","node_modules/easing-animation-frames/src/index.js","src/components/progress-ring/progress-ring.css?tag=progress-ring&encapsulation=shadow","src/components/progress-ring/progress-ring.tsx"],"sourcesContent":["function backInOut(t) {\n  var s = 1.70158 * 1.525;\n  if ((t *= 2) < 1)\n    return 0.5 * (t * t * ((s + 1) * t - s))\n  return 0.5 * ((t -= 2) * t * ((s + 1) * t + s) + 2)\n}\n\nfunction backIn(t) {\n  var s = 1.70158;\n  return t * t * ((s + 1) * t - s)\n}\n\nfunction backOut(t) {\n  var s = 1.70158;\n  return --t * t * ((s + 1) * t + s) + 1\n}\n\nfunction bounceOut(t) {\n  var a = 4.0 / 11.0;\n  var b = 8.0 / 11.0;\n  var c = 9.0 / 10.0;\n\n  var ca = 4356.0 / 361.0;\n  var cb = 35442.0 / 1805.0;\n  var cc = 16061.0 / 1805.0;\n\n  var t2 = t * t;\n\n  return t < a\n    ? 7.5625 * t2\n    : t < b\n      ? 9.075 * t2 - 9.9 * t + 3.4\n      : t < c\n        ? ca * t2 - cb * t + cc\n        : 10.8 * t * t - 20.52 * t + 10.72\n}\n\nfunction bounceInOut(t) {\n  return t < 0.5\n    ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))\n    : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5\n}\n\nfunction bounceIn(t) {\n  return 1.0 - bounceOut(1.0 - t)\n}\n\nfunction circInOut(t) {\n  if ((t *= 2) < 1) return -0.5 * (Math.sqrt(1 - t * t) - 1)\n  return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1)\n}\n\nfunction circIn(t) {\n  return 1.0 - Math.sqrt(1.0 - t * t)\n}\n\nfunction circOut(t) {\n  return Math.sqrt(1 - ( --t * t ))\n}\n\nfunction cubicInOut(t) {\n  return t < 0.5\n    ? 4.0 * t * t * t\n    : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0\n}\n\nfunction cubicIn(t) {\n  return t * t * t\n}\n\nfunction cubicOut(t) {\n  var f = t - 1.0;\n  return f * f * f + 1.0\n}\n\nfunction elasticInOut(t) {\n  return t < 0.5\n    ? 0.5 * Math.sin(+13.0 * Math.PI/2 * 2.0 * t) * Math.pow(2.0, 10.0 * (2.0 * t - 1.0))\n    : 0.5 * Math.sin(-13.0 * Math.PI/2 * ((2.0 * t - 1.0) + 1.0)) * Math.pow(2.0, -10.0 * (2.0 * t - 1.0)) + 1.0\n}\n\nfunction elasticIn(t) {\n  return Math.sin(13.0 * t * Math.PI/2) * Math.pow(2.0, 10.0 * (t - 1.0))\n}\n\nfunction elasticOut(t) {\n  return Math.sin(-13.0 * (t + 1.0) * Math.PI/2) * Math.pow(2.0, -10.0 * t) + 1.0\n}\n\nfunction expoInOut(t) {\n  return (t === 0.0 || t === 1.0)\n    ? t\n    : t < 0.5\n      ? +0.5 * Math.pow(2.0, (20.0 * t) - 10.0)\n      : -0.5 * Math.pow(2.0, 10.0 - (t * 20.0)) + 1.0\n}\n\nfunction expoIn(t) {\n  return t === 0.0 ? t : Math.pow(2.0, 10.0 * (t - 1.0))\n}\n\nfunction expoOut(t) {\n  return t === 1.0 ? t : 1.0 - Math.pow(2.0, -10.0 * t)\n}\n\nfunction linear(t) {\n  return t\n}\n\nfunction quadInOut(t) {\n    t /= 0.5;\n    if (t < 1) return 0.5*t*t\n    t--;\n    return -0.5 * (t*(t-2) - 1)\n}\n\nfunction quadIn(t) {\n  return t * t\n}\n\nfunction quadOut(t) {\n  return -t * (t - 2.0)\n}\n\nfunction quarticInOut(t) {\n  return t < 0.5\n    ? +8.0 * Math.pow(t, 4.0)\n    : -8.0 * Math.pow(t - 1.0, 4.0) + 1.0\n}\n\nfunction quarticIn(t) {\n  return Math.pow(t, 4.0)\n}\n\nfunction quarticOut(t) {\n  return Math.pow(t - 1.0, 3.0) * (1.0 - t) + 1.0\n}\n\nfunction qinticInOut(t) {\n    if ( ( t *= 2 ) < 1 ) return 0.5 * t * t * t * t * t\n    return 0.5 * ( ( t -= 2 ) * t * t * t * t + 2 )\n}\n\nfunction qinticIn(t) {\n  return t * t * t * t * t\n}\n\nfunction qinticOut(t) {\n  return --t * t * t * t * t + 1\n}\n\nfunction sineInOut(t) {\n  return -0.5 * (Math.cos(Math.PI*t) - 1)\n}\n\nfunction sineIn (t) {\n  var v = Math.cos(t * Math.PI * 0.5);\n  if (Math.abs(v) < 1e-14) return 1\n  else return 1 - v\n}\n\nfunction sineOut(t) {\n  return Math.sin(t * Math.PI/2)\n}\n\nexport { backInOut, backIn, backOut, bounceInOut, bounceIn, bounceOut, circInOut, circIn, circOut, cubicInOut, cubicIn, cubicOut, elasticInOut, elasticIn, elasticOut, expoInOut, expoIn, expoOut, linear, quadInOut, quadIn, quadOut, quarticInOut as quartInOut, quarticIn as quartIn, quarticOut as quartOut, qinticInOut as quintInOut, qinticIn as quintIn, qinticOut as quintOut, sineInOut, sineIn, sineOut };\n","import * as eases from \"eases-jsnext\";\n\n// Polyfills\nconst raf =\n  typeof window !== \"undefined\" && window.requestAnimationFrame\n    ? window.requestAnimationFrame\n    : (callback) => setTimeout(callback, 1000 / 60);\nconst caf =\n  typeof window !== \"undefined\" && window.cancelAnimationFrame\n    ? window.cancelAnimationFrame\n    : (id) => clearTimeout(id);\n\n/**\n * EASING ANIMATION FRAMES\n * easingType - Easing function name of `eases` module\n * duration - Transition duration in milliseconds\n * template (required) - Receives the current progress, stop, resume and restart functions\n * complete - Called after the transition completes\n */\n\nconst defaultOptions = {\n  duration: 4000,\n  easingType: \"cubicInOut\",\n};\n\nexport default ({\n  easingType = defaultOptions.easingType,\n  duration = defaultOptions.duration,\n  template,\n  complete = null,\n} = {}) => {\n  // template is the only required parameter\n  if (!template) {\n    return;\n  }\n\n  // Transition settings\n  let easingFunc = eases[easingType];\n  let framesDuration = duration;\n  let templateFunc = template;\n  let completeFunc = complete;\n\n  // Managing progress\n  let requestId = null;\n  let currentTime = null;\n  let startTime = null;\n  let passedTime = 0;\n  let progress = 0;\n\n  // Stop, resume and restart\n  let framesComplete = false;\n  let framesCancelled = false;\n  let framesResumed = false;\n  let framesRestarted = false;\n\n  let stopFrames = null;\n  let resumeFrames = null;\n  let restartFrames = null;\n\n  // Callback function for every requestAnimationFrame\n  const frame = (timestamp) => {\n    // The latter fallback is for setTimeout and unit tests\n    currentTime = timestamp || new Date().getTime();\n    if (framesResumed) {\n      startTime = currentTime - passedTime;\n      framesResumed = false;\n    } else {\n      startTime = startTime || currentTime;\n      passedTime = currentTime - startTime;\n    }\n\n    // Continue until the time is up unless the cancel function is called\n    if (passedTime < framesDuration && !framesCancelled) {\n      // Dispatch a new request for the next frame\n      requestId = raf(frame);\n\n      // Progress value (from 0 to 1) based on the time passed\n      progress = easingFunc(passedTime / framesDuration);\n\n      templateFunc({\n        progress,\n        stopFrames,\n        resumeFrames,\n        restartFrames,\n      });\n\n      return;\n    }\n\n    // After `restartFrames` is called, the next frame that has been requested will be cancelled,\n    // and it will restart transition with new settings\n    if (framesRestarted) {\n      // Resets settings\n      framesCancelled = false;\n      framesRestarted = false;\n\n      // Restart\n      raf(frame);\n\n      return;\n    }\n\n    // Transition complete\n    if (passedTime >= framesDuration) {\n      templateFunc({\n        progress: 1,\n        stopFrames: null,\n        resumeFrames: null,\n        restartFrames,\n      });\n\n      framesComplete = true;\n      requestId = null;\n\n      if (completeFunc) {\n        completeFunc();\n      }\n    }\n  };\n\n  // Function to stop the transition\n  stopFrames = () => {\n    framesCancelled = true;\n  };\n\n  // Function to resume the transition if it's been stopped by `stopFrames`\n  resumeFrames = () => {\n    if (!framesCancelled) {\n      return;\n    }\n    framesCancelled = false;\n    framesResumed = true;\n    requestId = raf(frame);\n  };\n\n  // Function to restart transition with new settings\n  restartFrames = ({\n    restartEasingType = defaultOptions.easingType,\n    restartDuration = defaultOptions.duration,\n    restartTemplate,\n    restartComplete = null,\n  } = {}) => {\n    if (!restartTemplate) {\n      return;\n    }\n\n    // Update settings\n    easingFunc = eases[restartEasingType];\n    framesDuration = restartDuration;\n    templateFunc = restartTemplate;\n    completeFunc = restartComplete;\n\n    startTime = null;\n    passedTime = 0;\n    progress = 0;\n\n    // If there is transition already running\n    if (!framesComplete && !framesCancelled) {\n      stopFrames();\n      framesRestarted = true;\n    }\n\n    // If the transition has been stopped\n    if (framesCancelled) {\n      framesCancelled = false;\n      requestId = raf(frame);\n    }\n\n    // If the previous transition is already complete\n    if (framesComplete) {\n      framesComplete = false;\n      requestId = raf(frame);\n    }\n  };\n\n  try {\n    // Start the transtion\n    requestId = raf(frame);\n  } catch (e) {\n    console.error(e); // eslint-disable-line no-console\n    caf(requestId);\n  }\n};\n",".root {\n  display: inline-block;\n  position: relative;\n}\n\ncircle {\n  transform: rotate(-90deg);\n  transform-origin: 50% 50%;\n  transition: stroke 0.4s ease 0s;\n}\n\ntext {\n  transition: fill 0.6s ease 0s;\n}\n\nslot {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n}\n\n.hide {\n  display: none;\n}\n","/* eslint-disable @stencil/decorators-style */\nimport { Component, Prop, Watch, h, Event, EventEmitter } from \"@stencil/core\";\nimport easingAnimationFrames, {\n  EasingType,\n  RestartFramesFunction,\n  EasingAnimationFramesOptions,\n  TemplateOptions,\n  ResumeFramesFunction,\n  RestartFramesOptions,\n} from \"easing-animation-frames\";\n\nexport interface EventPayload {\n  id: string;\n}\n\nexport interface ProgressEventPayload {\n  id: string;\n  progress: number;\n  percentage: number;\n}\n\nexport interface ColorChangeEventPayload {\n  id: string;\n  color: string;\n}\n\n@Component({\n  tag: \"progress-ring\",\n  styleUrl: \"progress-ring.css\",\n  shadow: true,\n})\nexport class ProgressRing {\n  // SHAPE\n\n  /**\n   * Radius of the ring\n   */\n  @Prop() radius = 80;\n  /**\n   * Thickness of the ring\n   */\n  @Prop() strokeWidth = 10;\n  private normalizedRadius: number;\n  private circumference: number;\n\n  @Watch(\"radius\")\n  radiusUpdated(newValue: number) {\n    this.setShapeSettings({\n      radius: newValue,\n    });\n    this.restartProgress();\n  }\n\n  @Watch(\"strokeWidth\")\n  strokeWidthUpdated(newValue: number) {\n    this.setShapeSettings({\n      strokeWidth: newValue,\n    });\n    this.restartProgress();\n  }\n\n  private setShapeSettings = ({\n    radius = this.radius,\n    strokeWidth = this.strokeWidth,\n  }) => {\n    // Caches calculation results\n    this.normalizedRadius = radius - Math.floor(strokeWidth / 2);\n    this.circumference = this.normalizedRadius * 2 * Math.PI;\n  };\n\n  // TEXT\n\n  /**\n   * Font size of the integer\n   */\n  @Prop() intSize = 30;\n  /**\n   * Font size of the decimal places\n   */\n  @Prop() decimalSize: number;\n  /**\n   * Hide digits\n   */\n  @Prop() disableDigits = false;\n  /**\n   * Hide decimal places\n   */\n  @Prop() disableDecimals = false;\n\n  private parsePercentageText = (percentage: number) => {\n    if (percentage <= 0) {\n      return [\"0\", \"0\"];\n    }\n    return percentage.toFixed(1).split(\".\");\n  };\n\n  private isZeroPercent = () => {\n    return this.percentage === 0;\n  };\n\n  private getDecimalSize = () => {\n    return this.decimalSize === undefined\n      ? Math.floor(this.intSize * 0.7)\n      : this.decimalSize;\n  };\n\n  // STYLE\n\n  /**\n   * Addes rounded linecap to the ring\n   */\n  @Prop() roundLinecap = false;\n\n  private getLinecap = () => {\n    return this.roundLinecap ? \"round\" : \"butt\";\n  };\n\n  // COLORS\n\n  /**\n   * Color steps of the ring\n   */\n  @Prop() colors: string | Map<number, string> = new Map([\n    [0, \"#ff4f40\"], // red\n    [25, \"#ffcd40\"], // yellow\n    [50, \"#66a0ff\"], // blue\n    [75, \"#30bf7a\"], // green\n  ]);\n\n  /**\n   * Inverts the color scheme\n   */\n  @Prop() invertColors = false;\n\n  private internalColors: Map<number, string>;\n\n  @Watch(\"colors\")\n  colorsUpdated(newValue: string | Map<number, string>) {\n    this.setColorsSettings({\n      colors: newValue,\n    });\n    this.restartProgress();\n  }\n\n  @Watch(\"invertColors\")\n  invertColorsUpdated(newValue: boolean) {\n    this.setColorsSettings({\n      invertColors: newValue,\n    });\n    this.restartProgress();\n  }\n\n  private setColorsSettings = ({\n    colors = this.colors,\n    invertColors = this.invertColors,\n  }) => {\n    const colorsMap: Map<number, string> =\n      colors instanceof Map ? colors : new Map(JSON.parse(colors));\n    if (!invertColors) {\n      this.internalColors = colorsMap;\n      return;\n    }\n\n    // If inverseColors prop is set to true\n    const colorsArray = [...colorsMap];\n    const colorsArrayReversed = [...colorsArray].reverse();\n    this.internalColors = new Map(\n      colorsArray.map((color, i) => [color[0], colorsArrayReversed[i][1]])\n    );\n  };\n\n  private setColors = (percentage: number) => {\n    let color: string;\n    const colorsArray = [...this.internalColors];\n\n    for (let i = 0; i < colorsArray.length; i++) {\n      if (i === colorsArray.length - 1) {\n        color = colorsArray[i][1];\n        break;\n      }\n      if (percentage < colorsArray[i + 1][0]) {\n        color = colorsArray[i][1];\n        break;\n      }\n    }\n\n    // Emits color change event\n    if (this.eventId !== undefined) {\n      this.prcColor.emit({\n        id: this.eventId,\n        color,\n      });\n    }\n\n    this.ring.style.stroke = color;\n    this.ringBackground.style.stroke = color;\n    this.percentageText.style.fill = color;\n  };\n\n  // ANIMATION\n\n  /**\n   * Percentage value (mandatory)\n   */\n  @Prop({ reflect: true, mutable: true }) percentage = 0;\n\n  /**\n   * Animation duration in miliseconds\n   */\n  @Prop() duration = 4000;\n\n  /**\n   * Easing animation function name\n   */\n  @Prop() easingType: EasingType = \"quartInOut\";\n  private internalPercentage: number;\n  private start = 0;\n  private progress = 0;\n  private resumeFrames: ResumeFramesFunction;\n  private restartFrames: RestartFramesFunction;\n  private isLoaded = false;\n  private isDisconnected = false;\n  private complete = false;\n\n  @Watch(\"percentage\")\n  percentageUpdated() {\n    if (this.percentage < 0) {\n      this.percentage = 0;\n      return;\n    }\n    this.restartProgress();\n  }\n\n  @Watch(\"duration\")\n  durationtUpdated() {\n    this.restartProgress();\n  }\n\n  @Watch(\"easingType\")\n  easingTypeUpdated() {\n    this.restartProgress();\n  }\n\n  // Called for every requestAnimationFrame\n  private setProgress = ({\n    progress,\n    stopFrames,\n    resumeFrames,\n    restartFrames,\n  }: TemplateOptions) => {\n    // Stops the animation if the component is disconnected from the DOM\n    if (this.isDisconnected && typeof stopFrames === \"function\") {\n      stopFrames();\n\n      // Emits stop event\n      if (this.eventId !== undefined) {\n        this.prcStop.emit({ id: this.eventId });\n      }\n      return;\n    }\n\n    this.progress = progress;\n    this.resumeFrames = resumeFrames;\n    this.restartFrames = restartFrames;\n\n    // Shape\n    const currentPercentage =\n      (this.internalPercentage - this.start) * progress + this.start;\n    const offset =\n      currentPercentage >= 100\n        ? 0\n        : this.circumference - (currentPercentage / 100) * this.circumference;\n    this.ring.style.strokeDashoffset = String(offset); // strokeDashoffset value type is string\n\n    // Text\n    const parsedPercentageText = this.parsePercentageText(currentPercentage);\n    this.intText.innerHTML = parsedPercentageText[0];\n    this.decimalText.innerHTML = parsedPercentageText[1];\n\n    // Emits progress change event\n    if (this.eventId !== undefined) {\n      this.prcProgress.emit({\n        id: this.eventId,\n        progress,\n        percentage: currentPercentage,\n      });\n    }\n  };\n\n  // Called every time the percentage attribute gets updated\n  private restartProgress = () => {\n    if (typeof this.restartFrames !== \"function\") {\n      return;\n    }\n\n    // Emits restart event\n    if (this.eventId !== undefined) {\n      this.prcRestart.emit({ id: this.eventId });\n    }\n\n    // Resets the progresss to 0 and set the start to be the previous percentage\n    const currentPercentage =\n      (this.internalPercentage - this.start) * this.progress + this.start;\n    this.internalPercentage = this.percentage;\n    this.progress = 0;\n    this.start = currentPercentage;\n\n    // Reset the complete state\n    this.complete = false;\n\n    // Restarts the template function\n    const restartSettings: RestartFramesOptions = {\n      restartDuration: this.duration,\n      restartEasingType: this.easingType,\n      restartTemplate: this.setProgress,\n      restartComplete: this.completeCallback,\n    };\n\n    this.setColors(this.percentage);\n    this.restartFrames(restartSettings);\n  };\n\n  private completeCallback = () => {\n    if (!this.complete) {\n      this.complete = true;\n\n      // Emits complete event\n      if (this.eventId !== undefined) {\n        this.prcComplete.emit({ id: this.eventId });\n      }\n    }\n  };\n\n  // EVENTS\n\n  /**\n   * Unique ID for the event listeners\n   */\n  @Prop() eventId?: string;\n  /**\n   * Animation progress value to be emitted (from 0 to 1)\n   */\n  @Event({ bubbles: true, composed: true })\n  prcProgress: EventEmitter<ProgressEventPayload>;\n  /**\n   * Color value to be emitted\n   */\n  @Event({ bubbles: true, composed: true })\n  prcColor: EventEmitter<ColorChangeEventPayload>;\n  /**\n   * OnStart event of the animation\n   */\n  @Event({ bubbles: true, composed: true })\n  prcStart: EventEmitter<EventPayload>;\n  /**\n   * OnComplete event of the animation\n   */\n  @Event({ bubbles: true, composed: true })\n  prcComplete: EventEmitter<EventPayload>;\n  /**\n   * OnStop event of the animation\n   */\n  @Event({ bubbles: true, composed: true }) prcStop: EventEmitter<EventPayload>;\n  /**\n   * OnResume event of the animation\n   */\n  @Event({ bubbles: true, composed: true })\n  prcResume: EventEmitter<EventPayload>;\n  /**\n   * OnRestart event of the animation\n   */\n  @Event({ bubbles: true, composed: true })\n  prcRestart: EventEmitter<EventPayload>;\n\n  /**\n   * Lifecycle Methods\n   */\n  componentWillLoad() {\n    if (this.percentage < 0) {\n      this.percentage = 0;\n      return;\n    }\n\n    // We need internal percentage, which is not reactive to prop changes\n    this.internalPercentage = this.percentage;\n\n    this.setShapeSettings({\n      radius: this.radius,\n      strokeWidth: this.strokeWidth,\n    });\n\n    this.setColorsSettings({\n      invertColors: this.invertColors,\n      colors: this.colors,\n    });\n  }\n\n  componentDidLoad() {\n    this.isLoaded = true;\n    this.setColors(this.percentage);\n\n    // Emits restart event\n    if (this.eventId !== undefined) {\n      this.prcStart.emit({ id: this.eventId });\n    }\n\n    const animationSettings: EasingAnimationFramesOptions = {\n      duration: this.duration,\n      easingType: this.easingType,\n      template: this.setProgress,\n      complete: this.completeCallback,\n    };\n\n    easingAnimationFrames(animationSettings);\n  }\n\n  connectedCallback() {\n    if (this.isLoaded) {\n      // If the component is already loaded, that means it was loaded but\n      // disconnected from the DOM and then connected to the DOM again\n      this.isDisconnected = false;\n\n      // Emits complete event\n      if (this.eventId !== undefined) {\n        this.prcResume.emit({ id: this.eventId });\n      }\n\n      // Resumes animation that is still in progress\n      this.resumeFrames();\n    }\n  }\n\n  disconnectedCallback() {\n    this.isDisconnected = true;\n  }\n\n  /**\n   * JSX\n   */\n  private ringBackground: SVGCircleElement;\n  private ring: SVGCircleElement;\n  private percentageText: SVGTextElement;\n  private intText: SVGTSpanElement;\n  private decimalText: SVGTSpanElement;\n\n  render() {\n    return (\n      <div class=\"root\">\n        <svg height={this.radius * 2} width={this.radius * 2}>\n          <circle\n            cx={this.radius}\n            cy={this.radius}\n            r={this.normalizedRadius}\n            stroke-width={this.strokeWidth}\n            fill=\"transparent\"\n            opacity=\"0.1\"\n            ref={(el: SVGCircleElement) => (this.ringBackground = el)}\n            class=\"background-ring\"\n          />\n          <circle\n            cx={this.radius}\n            cy={this.radius}\n            r={this.normalizedRadius}\n            stroke-width={this.strokeWidth}\n            stroke-dasharray={`${this.circumference} ${this.circumference}`}\n            fill=\"transparent\"\n            stroke-linecap={this.getLinecap()}\n            ref={(el: SVGCircleElement) => (this.ring = el)}\n            class=\"ring\"\n          />\n          <text\n            x=\"50%\"\n            y=\"50%\"\n            text-anchor=\"middle\"\n            dy=\"0.5ex\"\n            font-size={this.intSize}\n            ref={(el: SVGTextElement) => (this.percentageText = el)}\n            class={this.disableDigits ? \"hide\" : null}\n          >\n            <tspan\n              font-size={this.intSize}\n              ref={(el: SVGTSpanElement) => (this.intText = el)}\n              class=\"intText\"\n            ></tspan>\n            <tspan\n              font-size={this.intSize}\n              class={\n                this.isZeroPercent() || this.disableDecimals\n                  ? \"hide\"\n                  : \"decimalPointText\"\n              }\n            >\n              .\n            </tspan>\n            <tspan\n              font-size={this.getDecimalSize()}\n              ref={(el: SVGTSpanElement) => (this.decimalText = el)}\n              class={\n                this.isZeroPercent() || this.disableDecimals\n                  ? \"hide\"\n                  : \"decimalText\"\n              }\n            ></tspan>\n            <tspan\n              font-size={this.getDecimalSize()}\n              dx=\"0.5ex\"\n              class=\"percentageText\"\n            >\n              %\n            </tspan>\n          </text>\n        </svg>\n        <slot />\n      </div>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}